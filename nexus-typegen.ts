/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Status: "doing" | "done" | "pending"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  List: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Mutation: {};
  Query: {};
  Task: { // root type
    id: number; // Int!
    listId: number; // Int!
    position: number; // Int!
    status: string; // String!
    title: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  List: { // field return type
    id: number; // Int!
    name: string; // String!
    tasks: Array<NexusGenRootTypes['Task'] | null> | null; // [Task]
  }
  Mutation: { // field return type
    createList: NexusGenRootTypes['List']; // List!
    createTask: NexusGenRootTypes['Task']; // Task!
    updateTask: NexusGenRootTypes['Task']; // Task!
  }
  Query: { // field return type
    lists: NexusGenRootTypes['List'][]; // [List!]!
    tasks: NexusGenRootTypes['Task'][]; // [Task!]!
  }
  Task: { // field return type
    id: number; // Int!
    list: NexusGenRootTypes['List'] | null; // List
    listId: number; // Int!
    position: number; // Int!
    status: string; // String!
    title: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  List: { // field return type name
    id: 'Int'
    name: 'String'
    tasks: 'Task'
  }
  Mutation: { // field return type name
    createList: 'List'
    createTask: 'Task'
    updateTask: 'Task'
  }
  Query: { // field return type name
    lists: 'List'
    tasks: 'Task'
  }
  Task: { // field return type name
    id: 'Int'
    list: 'List'
    listId: 'Int'
    position: 'Int'
    status: 'String'
    title: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createList: { // args
      name: string; // String!
    }
    createTask: { // args
      listId: number; // Int!
      status: NexusGenEnums['Status']; // Status!
      title: string; // String!
    }
    updateTask: { // args
      id: number; // Int!
      position?: number | null; // Int
      status?: NexusGenEnums['Status'] | null; // Status
      title?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}